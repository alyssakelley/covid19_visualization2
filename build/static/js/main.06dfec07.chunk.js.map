{"version":3,"sources":["components/Cards/cardImages/sym_breathing.png","components/Cards/cardImages/sym_cough.png","components/Cards/cardImages/sym_fever.png","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Cards/cardImages/th1_breathing.png","components/Cards/cardImages/th1_temp.png","components/Cards/cardImages/th1_washhands.png","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/covid19_image2.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","CardDeck","Card","bg","text","className","style","margin","Img","variant","src","image1b","Body","Title","Text","start","end","value","duration","separator","Footer","Date","toDateString","image2b","image3b","url","fetchData","country","a","changeableURL","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","graphType","useState","dailyData","setDailyData","useEffect","fetchAPI","window","scrollTo","message","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","options","scales","yAxes","scaleLabel","display","labelString","xAxes","title","barChart","legend","styles","container","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","event","target","i","key","App","state","fetchedData","setState","this","initViz","vizContainer","tableau","Viz","hideTabs","width","height","image","covid19Image","alt","ButtonGroup","toggle","Button","size","active","onClick","handleGraphPickerL","handleGraphPickerB","ref","div","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06dfec07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sym_breathing.5c1adb94.png\";","module.exports = __webpack_public_path__ + \"static/media/sym_cough.99315a68.png\";","module.exports = __webpack_public_path__ + \"static/media/sym_fever.560e5289.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport Card from \"react-bootstrap/Card\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport image1a from './cardImages/sym_breathing.png';\nimport image2a from './cardImages/sym_cough.png';\nimport image3a from './cardImages/sym_fever.png';\nimport image2b from './cardImages/th1_breathing.png';\nimport image3b from './cardImages/th1_temp.png';\nimport image1b from './cardImages/th1_washhands.png';\nimport cx from 'classnames'; // this allows us to use multiple styles and links the classes together\n// this is especially useful so each card can have the same overall style, and also individualing \n// style for each stat\n\nimport styles from './Cards.module.css';\n\n\nconst Cards = ( {data: {confirmed, recovered, deaths, lastUpdate} }) => {\n    console.log(confirmed);\n\n    if (!confirmed) {\n        return 'Loading...';\n    }\n    return (\n        <div>\n            <CardDeck>\n                <Card\n                    bg=\"primary\"\n                    text=\"white\"\n                    className=\"text-center\"\n                    style={{margin: \"10px 10px 10px 100px\"}}\n                >\n                    <Card.Img variant=\"top\" src={image1b} />\n                    <Card.Body>\n                        <Card.Title>Infected</Card.Title>\n                        <Card.Text>\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Card.Text>\n                    </Card.Body>\n                    <Card.Footer>\n                        <small>Last updated: {new Date(lastUpdate).toDateString()}</small>\n                    </Card.Footer>\n                    </Card>\n\n                <Card\n                    bg=\"success\"\n                    text=\"white\"\n                    className=\"text-center\"\n                    style={{margin: \"10px\"  }}\n                >\n                    <Card.Img variant=\"top\" src={image2b} />\n                    <Card.Body>\n                        <Card.Title>Recovered</Card.Title>\n                        <Card.Text>\n                            <CountUp \n                                start={0} \n                                end={recovered.value} \n                                duration={2.5} \n                                separator=\",\" />\n                        </Card.Text>\n                    </Card.Body>\n                    <Card.Footer>\n                        <small>Last updated: {new Date(lastUpdate).toDateString()}</small>\n                    </Card.Footer>\n                    </Card>\n\n                <Card\n                    bg=\"danger\"\n                    text=\"white\"\n                    className=\"text-center\"\n                    style={{margin: \"10px 100px 10px 10px\"}}\n                >\n                    <Card.Img variant=\"top\" src={image3b} />\n                    <Card.Body>\n                        <Card.Title>Deaths</Card.Title>\n                        <Card.Text>\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"/>\n                        </Card.Text>\n                    </Card.Body>\n                    <Card.Footer>\n                        <small>Last updated: {new Date(lastUpdate).toDateString()}</small>\n                    </Card.Footer>\n                    </Card>\n\n            </CardDeck>\n\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\nconst url = 'https://covid19.mathdro.id/api'; // link to the api\n\nexport const fetchData = async (country) => {\n    let changeableURL = url; // initially setting the URL to the basic API URL because no country has been selected yet \n    if(country)\n    {\n        // this is indicating that a country has been selected, so we want to build a new URL to the API for that country\n        changeableURL = `${url}/countries/${country}`\n    }\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableURL);\n        //console.log(response);\n\n        // creating a javascript object to hold all of the useful data from the api\n        // the api contains a lot of random data that does not have as revelant information\n        // so we pull out the most import pieces: confirmed, recovered, deaths, and when it \n        // was last updated. This could also be done when creating the data var as so:\n        // const { data: { confirmed, recovered, daths, lastUpdate} } = await axios.get(url);\n        // const modifiedData = {\n        //     confirmed: data.confirmed,\n        //     recovered: data.recovered,\n        //     deaths: data.deaths,\n        //     lastUpdate: data.lastUpdate,\n        // }\n        // console.log(\"The following information is pertaining to: \" + country);\n        // console.log(\"\\tThis is the confirmed number of COIVD-19 cases from the API: \" + confirmed.value + \" as of \" + lastUpdate);\n        // console.log(\"\\tThis is the recovered number of COVID-19 cases from the API: \" + recovered.value + \" as of \" + lastUpdate);\n        // console.log(\"\\tThis is the number of deaths from COVID-19 from the API: \" + deaths.value + \" as of \" + lastUpdate);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch(error) {\n        return error;\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        console.log(data);\n        return data.map(({ confirmed, recovered, deaths, reportDate: date }) => ({ confirmed: confirmed.total, recovered: recovered.total, deaths: deaths.total, date }));\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries }} = await axios.get(`${url}/countries`);\n        // console.log(response);\n        console.log(\"Here are the countries: \", countries.map((country) => country.name));\n        // fetchCountryHotSpots(countries.map((country) => country.name));\n        return countries.map((country) => country.name);\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchCountryHotSpots = async () => {\n    const { data: { countries }} = await axios.get(`${url}/countries`);\n    const countriesList = (countries.map((country) => country.name));\n    let countryHotSpot = new Map();\n    try {\n        console.log(\"I am in fetchCountryHotSpots\");\n        for( var i = 0; i < 188; i++)\n        {\n            if (countriesList[i] === \"Gambia\")\n            {\n                // This country data is not available so setting it to 0\n                countryHotSpot.set(\"Gambia\", 0);\n            }\n            else \n            {\n                // console.log(\"-> \" + countriesList[i]);\n                const currCountry = countriesList[i];\n                const currData = await fetchData(countriesList[i]);\n                const numInfected = currData.confirmed.value;\n                const numDead = currData.deaths.value;\n                const deathPercentage = ((numDead/numInfected) * 100)\n                // console.log(\"\\tThis is the current data or this country: \" + currData.confirmed.value);\n                countryHotSpot.set(currCountry, deathPercentage);\n            }\n        }\n        console.log(\"This is the country hot spots: \", countryHotSpot);\n        console.log(\"This is the map of all the countries: \", countriesList);\n        return countryHotSpot;\n    } catch (error) {\n        return error;\n    }\n}","import React, {useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data, country, graphType}) => {\n    const [dailyData, setDailyData] = useState([]);\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        // console.log(initialDailyData);\n        fetchAPI();\n        window.scrollTo(0, 0); // this prevents the webapge from scrolling to the top when the different graphs are selected\n    }, []); // this will only happen once \n\n    let countryName = country;\n    let message = `Current state in ${country}`;\n    if (!country) {\n        countryName = \"Global\";\n        message = \"Current Global state\";\n    }\n\n    const lineChart = (\n        dailyData[0] ? (\n            <Line \n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: \n                    [{\n                        data: dailyData.map((data) => data.confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true,\n                    }, \n                    {\n                        data: dailyData.map((data) => data.recovered),\n                        label: 'Recovered',\n                        borderColor: 'green',\n                        fill: true,\n                    }, \n                    {\n                        data: dailyData.map((data) => data.deaths),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        backgroundColor: 'rgba(255, 0, 0, 0.5',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options=\n                {{\n                    scales: {\n                        yAxes: [{\n                          scaleLabel: {\n                            display: true,\n                            labelString: 'Number of cases per category'\n                          }\n                        }],\n                        xAxes: [{\n                          scaleLabel: {\n                            display: true,\n                            labelString: 'Date data was recieved'\n                          }\n                        }],\n                    },\n                    title: { display: true, text:`Line graph - ${message}`}     \n                }}\n            />\n            ) : \"Line Graph Unavailable\"\n    );\n\n    console.log(\"Line - This is in Chart.js and this is data for infected: \" + dailyData.map((data) => data.confirmed));\n    console.log(\"Line - This is in Chart.js and this is data for recovered: \" + dailyData.map((data) => data.recovered));\n    console.log(\"Line - This is in Chart.js and this is data for deaths: \" + dailyData.map((data) => data.deaths));\n\n    const barChart = (\n        data.confirmed ? (\n            <Bar \n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: \n                    [{\n                        label: 'People',\n                        backgroundColor: \n                        [\n                            'rgba(0, 0, 255, 0.5', // infected = blue\n                            'rgba(0, 255, 0, 0.5', // recovered = green\n                            'rgba(255, 0, 0, 0.5', // deaths = red\n                        ], \n                        data: [data.confirmed.value, data.recovered.value, data.deaths.value]\n                    }]\n                }}\n                options=\n                {{\n                    scales: {\n                        yAxes: [{\n                          scaleLabel: {\n                            display: true,\n                            labelString: 'Number of cases per category'\n                          }\n                        }],\n                        },     \n                    legend: { display: false},\n                    title: { display: true, text:`Bar Graph - ${message}`}\n                }}\n            />\n        ) : \"Bar Graph Unavailable\"\n    );\n\n    // if there is a country chosen, then we display a bar chart for that country\n    // otherwise display the line chart for the global values\n    return (\n        <div className={styles.container}>\n            {graphType==\"barGraph\" ? barChart : lineChart} \n        </div>\n    )\n}\n\nexport default Chart;","import React, { useState, useEffect } from 'react';\nimport {NativeSelect, FormControl } from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker = ( {handleCountryChange} ) => {\n\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async() => {\n            setFetchedCountries( await fetchCountries());\n        }\n        fetchAPI();\n    }, []); // now this will only change when the setFetchedCountries changes and this allows the user to actually select a different country to view\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(event) => handleCountryChange(event.target.value)}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\n\nimport { Cards, Chart, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { fetchData, fetchCountryHotSpots } from './api';\nimport covid19Image from './images/covid19_image2.png';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\n// import MapDisplay from './components/MapDisplay/MapDisplay.js';\nimport tableau from 'tableau-api';  \n\nclass App extends React.Component {\n\n    state = {\n        data: {},\n        country: '',\n        graphType: '',\n        // countryHotSpotPercents: {},\n    }\n\n    // with componentDidMount, the async goes before it instead of after like usual functions\n    async componentDidMount() {\n        this.initViz();\n        const fetchedData = await fetchData(); // fetchData is an asyncronous function so it needs an await\n        console.log(\"Fetched data \" + fetchedData);\n        this.setState({ data: fetchedData, graphType: \"barGraph\"});\n        // let fetchedCountryHotSpots = new Map();\n        // fetchedCountryHotSpots= await fetchCountryHotSpots();\n        // console.log(\"Fetched country hot spots \" + fetchedCountryHotSpots);\n        // this.setState({ countryHotSpotPercents: fetchedCountryHotSpots});\n    }\n\n    initViz() {  \n        console.log(\"Inside the VIZ INIT!!\");\n        const vizUrl = 'https://public.tableau.com/shared/Y357XSK6K?:display_count=y&:origin=viz_share_link';\n        const options = {\n            hideTabs: true,\n            width: \"1000px\",\n            height: \"800px\"\n        };\n        const vizContainer = this.vizContainer;  \n        let viz = new window.tableau.Viz(vizContainer, vizUrl, options); \n      } \n\n    handleCountryChange = async (country) => {\n        // get the data\n        const fetchedData = await fetchData(country);\n        console.log(fetchedData);\n        // set the state\n        this.setState({ data: fetchedData, graphType: \"barGraph\", country: country});\n    }\n\n    handleGraphPickerL() {\n        console.log(\"Clicked line button\");\n        this.setState({\n            graphType: \"lineGraph\"\n        })\n    }\n\n    handleGraphPickerB() {\n        console.log(\"Clicked bar button\");\n        this.setState({\n            graphType: \"barGraph\"\n        })\n    }\n\n    // pickTopHotSpots() {\n    //     console.log(\"Picking hot spots\");\n    //     return Object.keys(this.countryHotSpotPercents).reduce((a, b) => this.countryHotSpotPercents[a] > this.countryHotSpotPercents[b] ? a : b);\n    // }\n\n\n    render() {\n        let message = \"Note: There is no daily data available for recovered cases.\";\n        const { data, country, graphType} = this.state;\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src={covid19Image} alt=\"COVID-19\"/>\n                <Cards data = {data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <ButtonGroup toggle className=\"mb-2\">\n                    <Button variant=\"light\" size=\"sm\" active>\n                            <a onClick={() => this.handleGraphPickerL()}>Line Graph</a>\n                            {/* <a> \"Note: There is no daily data available for recovered cases.\"</a> */}\n                        </Button>\n                    <Button variant=\"light\" size=\"sm\" active>\n                            <a onClick={() => this.handleGraphPickerB()}>Bar Graph</a>\n                    </Button>\n                </ButtonGroup>\n                <Chart data = {data} country = {country} graphType = {graphType}/>\n                <a>{graphType==\"lineGraph\" ? message : null}</a>\n                {/* <h1>{console.log(this.pickTopHotSpots())}</h1> */}\n                <a ref={(div) => { this.vizContainer = div }}></a>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root')\n    );","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","module.exports = __webpack_public_path__ + \"static/media/th1_breathing.60a40790.png\";","module.exports = __webpack_public_path__ + \"static/media/th1_temp.9df417b6.png\";","module.exports = __webpack_public_path__ + \"static/media/th1_washhands.65410af5.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/covid19_image2.5255d57e.png\";"],"sourceRoot":""}