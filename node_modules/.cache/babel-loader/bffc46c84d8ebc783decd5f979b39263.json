{"ast":null,"code":"var _jsxFileName = \"/Users/alyssakelley/Desktop/GitHub/covid19_visualization/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data,\n  country,\n  graphType\n}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    }; // console.log(initialDailyData);\n\n\n    fetchAPI();\n    window.scrollTo(0, 0); // this prevents the webapge from scrolling to the top when the different graphs are selected\n  }, []); // this will only happen once \n\n  let countryName = country;\n  let message = `Current state in ${country}`;\n\n  if (!country) {\n    countryName = \"Global\";\n    message = \"Current Global state\";\n  }\n\n  const lineChart = dailyData[0] ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(data => data.confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(data => data.recovered),\n        label: 'Recovered',\n        borderColor: 'green',\n        fill: true\n      }, {\n        data: dailyData.map(data => data.deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(255, 0, 0, 0.5',\n        fill: true\n      }]\n    },\n    options: {\n      scales: {\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Number of cases per category'\n          }\n        }],\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Date data was recieved'\n          }\n        }]\n      },\n      title: {\n        display: true,\n        text: `Line graph - ${message}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }) : \"Line Graph Unavailable\";\n  console.log(\"Line - This is in Chart.js and this is data for infected: \" + dailyData.map(data => data.confirmed));\n  console.log(\"Line - This is in Chart.js and this is data for recovered: \" + dailyData.map(data => data.recovered));\n  console.log(\"Line - This is in Chart.js and this is data for deaths: \" + dailyData.map(data => data.deaths));\n  const barChart = data.confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0, 0, 255, 0.5', // infected = blue\n        'rgba(0, 255, 0, 0.5', // recovered = green\n        'rgba(255, 0, 0, 0.5' // deaths = red\n        ],\n        data: [data.confirmed.value, data.recovered.value, data.deaths.value]\n      }]\n    },\n    options: {\n      scales: {\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Number of cases per category'\n          }\n        }]\n      },\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Bar Graph - ${message}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }) : \"Bar Graph Unavailable\"; // if there is a country chosen, then we display a bar chart for that country\n  // otherwise display the line chart for the global values\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, graphType == \"barGraph\" ? barChart : lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/alyssakelley/Desktop/GitHub/covid19_visualization/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","country","graphType","dailyData","setDailyData","fetchAPI","window","scrollTo","countryName","message","lineChart","labels","map","date","datasets","confirmed","label","borderColor","fill","recovered","deaths","backgroundColor","scales","yAxes","scaleLabel","display","labelString","xAxes","title","text","console","log","barChart","value","legend","container"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data, country, graphType}) => {\n    const [dailyData, setDailyData] = useState([]);\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        // console.log(initialDailyData);\n        fetchAPI();\n        window.scrollTo(0, 0); // this prevents the webapge from scrolling to the top when the different graphs are selected\n    }, []); // this will only happen once \n\n    let countryName = country;\n    let message = `Current state in ${country}`;\n    if (!country) {\n        countryName = \"Global\";\n        message = \"Current Global state\";\n    }\n\n    const lineChart = (\n        dailyData[0] ? (\n            <Line \n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: \n                    [{\n                        data: dailyData.map((data) => data.confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true,\n                    }, \n                    {\n                        data: dailyData.map((data) => data.recovered),\n                        label: 'Recovered',\n                        borderColor: 'green',\n                        fill: true,\n                    }, \n                    {\n                        data: dailyData.map((data) => data.deaths),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        backgroundColor: 'rgba(255, 0, 0, 0.5',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options=\n                {{\n                    scales: {\n                        yAxes: [{\n                          scaleLabel: {\n                            display: true,\n                            labelString: 'Number of cases per category'\n                          }\n                        }],\n                        xAxes: [{\n                          scaleLabel: {\n                            display: true,\n                            labelString: 'Date data was recieved'\n                          }\n                        }],\n                    },\n                    title: { display: true, text:`Line graph - ${message}`}     \n                }}\n            />\n            ) : \"Line Graph Unavailable\"\n    );\n\n    console.log(\"Line - This is in Chart.js and this is data for infected: \" + dailyData.map((data) => data.confirmed));\n    console.log(\"Line - This is in Chart.js and this is data for recovered: \" + dailyData.map((data) => data.recovered));\n    console.log(\"Line - This is in Chart.js and this is data for deaths: \" + dailyData.map((data) => data.deaths));\n\n    const barChart = (\n        data.confirmed ? (\n            <Bar \n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: \n                    [{\n                        label: 'People',\n                        backgroundColor: \n                        [\n                            'rgba(0, 0, 255, 0.5', // infected = blue\n                            'rgba(0, 255, 0, 0.5', // recovered = green\n                            'rgba(255, 0, 0, 0.5', // deaths = red\n                        ], \n                        data: [data.confirmed.value, data.recovered.value, data.deaths.value]\n                    }]\n                }}\n                options=\n                {{\n                    scales: {\n                        yAxes: [{\n                          scaleLabel: {\n                            display: true,\n                            labelString: 'Number of cases per category'\n                          }\n                        }],\n                        },     \n                    legend: { display: false},\n                    title: { display: true, text:`Bar Graph - ${message}`}\n                }}\n            />\n        ) : \"Bar Graph Unavailable\"\n    );\n\n    // if there is a country chosen, then we display a bar chart for that country\n    // otherwise display the line chart for the global values\n    return (\n        <div className={styles.container}>\n            {graphType==\"barGraph\" ? barChart : lineChart} \n        </div>\n    )\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}