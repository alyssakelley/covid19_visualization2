{"ast":null,"code":"var _jsxFileName = \"/Users/alyssakelley/Desktop/GitHub/javascript_react/covid19_visualization/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data,\n  country\n}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    }; // console.log(initialDailyData);\n\n\n    fetchAPI();\n  }, []); // this will only happen once \n\n  const lineChart = dailyData[0] ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(data => data.confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(data => data.recovered),\n        label: 'Recovered',\n        borderColor: 'green',\n        fill: true\n      }, {\n        data: dailyData.map(data => data.deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(255, 0, 0, 0.5',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }) : null;\n  console.log(\"This is in Chart.js and this is data for infected: \" + data.infected);\n  console.log(\"This is in Chart.js and this is data for recovered: \" + data.recovered);\n  console.log(\"This is in Chart.js and this is data for deaths: \" + data.deaths); // const lineChart = (\n  //     data.confirmed ? (\n  //         <Line \n  //             data={{\n  //                 labels: dailyData.map(({ date }) => date),\n  //                 datasets: \n  //                 [{\n  //                     label: 'Infected',\n  //                     borderColor: 'blue',\n  //                     fill: true,\n  //                     data: [data.infected.value]\n  //                 },\n  //                 {\n  //                     label: 'Recovered',\n  //                     data: [data.recovered.value],\n  //                     borderColor: 'green',\n  //                     fill: true,\n  //                 },\n  //                 {\n  //                     label: 'Deaths',\n  //                     data: [data.deaths.value],\n  //                     borderColor: 'red',\n  //                     fill: true,\n  //                 },\n  //             ],\n  //             }}\n  //         />\n  //     ) : null\n  // );\n\n  const barChart = data.confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0, 0, 255, 0.5', // infected = blue\n        'rgba(0, 255, 0, 0.5', // recovered = green\n        'rgba(255, 0, 0, 0.5' // deaths = red\n        ],\n        data: [data.confirmed.value, data.recovered.value, data.deaths.value]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }) : null; // if there is a country chosen, then we display a bar chart for that country\n  // otherwise display the line chart for the global values\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/alyssakelley/Desktop/GitHub/javascript_react/covid19_visualization/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","country","dailyData","setDailyData","fetchAPI","lineChart","labels","map","date","datasets","confirmed","label","borderColor","fill","recovered","deaths","backgroundColor","console","log","infected","barChart","value","legend","display","title","text","container"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        // console.log(initialDailyData);\n        fetchAPI();\n    }, []); // this will only happen once \n\n    const lineChart = (\n        dailyData[0] ? (\n            <Line \n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: \n                    [{\n                        data: dailyData.map((data) => data.confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true,\n                    }, \n                    {\n                        data: dailyData.map((data) => data.recovered),\n                        label: 'Recovered',\n                        borderColor: 'green',\n                        fill: true,\n                    }, \n                    {\n                        data: dailyData.map((data) => data.deaths),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        backgroundColor: 'rgba(255, 0, 0, 0.5',\n                        fill: true,\n                    },\n                    ],\n                }}\n            />\n            ) : null\n    );\n    console.log(\"This is in Chart.js and this is data for infected: \" + data.infected);\n    console.log(\"This is in Chart.js and this is data for recovered: \" + data.recovered);\n    console.log(\"This is in Chart.js and this is data for deaths: \" + data.deaths);\n    // const lineChart = (\n    //     data.confirmed ? (\n    //         <Line \n    //             data={{\n    //                 labels: dailyData.map(({ date }) => date),\n    //                 datasets: \n    //                 [{\n    //                     label: 'Infected',\n    //                     borderColor: 'blue',\n    //                     fill: true,\n    //                     data: [data.infected.value]\n    //                 },\n    //                 {\n    //                     label: 'Recovered',\n    //                     data: [data.recovered.value],\n    //                     borderColor: 'green',\n    //                     fill: true,\n    //                 },\n    //                 {\n    //                     label: 'Deaths',\n    //                     data: [data.deaths.value],\n    //                     borderColor: 'red',\n    //                     fill: true,\n    //                 },\n    //             ],\n    //             }}\n    //         />\n    //     ) : null\n    // );\n\n    const barChart = (\n        data.confirmed ? (\n            <Bar \n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: \n                    [{\n                        label: 'People',\n                        backgroundColor: \n                        [\n                            'rgba(0, 0, 255, 0.5', // infected = blue\n                            'rgba(0, 255, 0, 0.5', // recovered = green\n                            'rgba(255, 0, 0, 0.5', // deaths = red\n                        ], \n                        data: [data.confirmed.value, data.recovered.value, data.deaths.value]\n                    }]\n                }}\n                options=\n                {{\n                    legend: { display: false},\n                    title: { display: true, text:`Current state in ${country}`}\n                }}\n            />\n        ) : null\n    );\n\n    // if there is a country chosen, then we display a bar chart for that country\n    // otherwise display the line chart for the global values\n    return (\n        <div className={styles.container}>\n            {/* {country ? barChart : lineChart}  */}\n            {/* {barChart} */}\n            {lineChart}\n        </div>\n    )\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}