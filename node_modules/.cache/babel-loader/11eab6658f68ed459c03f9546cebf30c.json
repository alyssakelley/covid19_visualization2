{"ast":null,"code":"import axios from 'axios';\nconst url = 'https://covid19.mathdro.id/api'; // link to the api\n\nexport const fetchData = async country => {\n  let changeableURL = url; // initially setting the URL to the basic API URL because no country has been selected yet \n\n  if (country) {\n    // this is indicating that a country has been selected, so we want to build a new URL to the API for that country\n    changeableURL = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: {\n        confirmed,\n        recovered,\n        deaths,\n        lastUpdate\n      }\n    } = await axios.get(changeableURL); //console.log(response);\n    // creating a javascript object to hold all of the useful data from the api\n    // the api contains a lot of random data that does not have as revelant information\n    // so we pull out the most import pieces: confirmed, recovered, deaths, and when it \n    // was last updated. This could also be done when creating the data var as so:\n    // const { data: { confirmed, recovered, daths, lastUpdate} } = await axios.get(url);\n    // const modifiedData = {\n    //     confirmed: data.confirmed,\n    //     recovered: data.recovered,\n    //     deaths: data.deaths,\n    //     lastUpdate: data.lastUpdate,\n    // }\n\n    console.log(\"The following information is pertaining to: \" + country);\n    console.log(\"\\tThis is the confirmed number of COIVD-19 cases from the API: \" + confirmed.value + \" as of \" + lastUpdate);\n    console.log(\"\\tThis is the recovered number of COVID-19 cases from the API: \" + recovered.value + \" as of \" + lastUpdate);\n    console.log(\"\\tThis is the number of deaths from COVID-19 from the API: \" + deaths.value + \" as of \" + lastUpdate);\n    return {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate\n    };\n  } catch (error) {\n    return error;\n  }\n};\nexport const fetchDailyData = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(`${url}/daily`);\n    console.log(data);\n    return data.map(({\n      confirmed,\n      recovered,\n      deaths,\n      reportDate: date\n    }) => ({\n      confirmed: confirmed.total,\n      recovered: recovered.total,\n      deaths: deaths.total,\n      date\n    }));\n  } catch (error) {\n    return error;\n  }\n};\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: {\n        countries\n      }\n    } = await axios.get(`${url}/countries`); // console.log(response);\n\n    console.log(\"Here are the countries: \", countries.map(country => country.name));\n    fetchCountryHotSpots(countries.map(country => country.name));\n    return countries.map(country => country.name);\n  } catch (error) {\n    return error;\n  }\n};\nexport const fetchCountryHotSpots = async countriesList => {\n  try {\n    console.log(\"I am in fetchCountryHotSpots\");\n\n    for (var i = 0; i < 188; i++) {\n      if (countriesList[i] === \"Gambia\") {} else {\n        console.log(\"-> \" + countriesList[i]);\n        const currData = await fetchData(countriesList[i]);\n        const numInfected = currData.confirmed.value;\n        const numDead = currData.deaths.value;\n        const deathPercentage = console.log(\"\\tThis is the current data or this country: \" + currData.confirmed.value); // countries.map((country) => deathPercentage;\n        // let deathPercent = countryMap[i]\n        // countryMap.map((countryMap))\n      }\n    }\n\n    console.log(\"This is the map of all the countries: \", countriesList);\n  } catch (error) {\n    return error;\n  }\n};","map":{"version":3,"sources":["/Users/alyssakelley/Desktop/GitHub/javascript_react/covid19_visualization/src/api/index.js"],"names":["axios","url","fetchData","country","changeableURL","data","confirmed","recovered","deaths","lastUpdate","get","console","log","value","error","fetchDailyData","map","reportDate","date","total","fetchCountries","countries","name","fetchCountryHotSpots","countriesList","i","currData","numInfected","numDead","deathPercentage"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst url = 'https://covid19.mathdro.id/api'; // link to the api\n\nexport const fetchData = async (country) => {\n    let changeableURL = url; // initially setting the URL to the basic API URL because no country has been selected yet \n    if(country)\n    {\n        // this is indicating that a country has been selected, so we want to build a new URL to the API for that country\n        changeableURL = `${url}/countries/${country}`\n    }\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableURL);\n        //console.log(response);\n\n        // creating a javascript object to hold all of the useful data from the api\n        // the api contains a lot of random data that does not have as revelant information\n        // so we pull out the most import pieces: confirmed, recovered, deaths, and when it \n        // was last updated. This could also be done when creating the data var as so:\n        // const { data: { confirmed, recovered, daths, lastUpdate} } = await axios.get(url);\n        // const modifiedData = {\n        //     confirmed: data.confirmed,\n        //     recovered: data.recovered,\n        //     deaths: data.deaths,\n        //     lastUpdate: data.lastUpdate,\n        // }\n        console.log(\"The following information is pertaining to: \" + country);\n        console.log(\"\\tThis is the confirmed number of COIVD-19 cases from the API: \" + confirmed.value + \" as of \" + lastUpdate);\n        console.log(\"\\tThis is the recovered number of COVID-19 cases from the API: \" + recovered.value + \" as of \" + lastUpdate);\n        console.log(\"\\tThis is the number of deaths from COVID-19 from the API: \" + deaths.value + \" as of \" + lastUpdate);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch(error) {\n        return error;\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        console.log(data);\n        return data.map(({ confirmed, recovered, deaths, reportDate: date }) => ({ confirmed: confirmed.total, recovered: recovered.total, deaths: deaths.total, date }));\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries }} = await axios.get(`${url}/countries`);\n        // console.log(response);\n        console.log(\"Here are the countries: \", countries.map((country) => country.name));\n        fetchCountryHotSpots(countries.map((country) => country.name));\n        return countries.map((country) => country.name);\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchCountryHotSpots = async (countriesList) => {\n    try {\n        console.log(\"I am in fetchCountryHotSpots\");\n        for( var i = 0; i < 188; i++)\n        {\n            if (countriesList[i] === \"Gambia\")\n            {\n\n            }\n            else \n            {\n                console.log(\"-> \" + countriesList[i]);\n                const currData = await fetchData(countriesList[i]);\n                const numInfected = currData.confirmed.value;\n                const numDead = currData.deaths.value;\n                const deathPercentage = \n                console.log(\"\\tThis is the current data or this country: \" + currData.confirmed.value);\n                // countries.map((country) => deathPercentage;\n                // let deathPercent = countryMap[i]\n                // countryMap.map((countryMap))\n\n            }\n        }\n        console.log(\"This is the map of all the countries: \", countriesList);\n    } catch (error) {\n        return error;\n    }\n}"]},"metadata":{},"sourceType":"module"}