{"ast":null,"code":"import _regeneratorRuntime from\"/Users/alyssakelley/Desktop/GitHub/covid19_visualization/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alyssakelley/Desktop/GitHub/covid19_visualization/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';var url='https://covid19.mathdro.id/api';// link to the api\nexport var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(country){var changeableURL,_yield$axios$get,_yield$axios$get$data,confirmed,recovered,deaths,lastUpdate;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:changeableURL=url;// initially setting the URL to the basic API URL because no country has been selected yet \nif(country){// this is indicating that a country has been selected, so we want to build a new URL to the API for that country\nchangeableURL=\"\".concat(url,\"/countries/\").concat(country);}_context.prev=2;_context.next=5;return axios.get(changeableURL);case 5:_yield$axios$get=_context.sent;_yield$axios$get$data=_yield$axios$get.data;confirmed=_yield$axios$get$data.confirmed;recovered=_yield$axios$get$data.recovered;deaths=_yield$axios$get$data.deaths;lastUpdate=_yield$axios$get$data.lastUpdate;return _context.abrupt(\"return\",{confirmed:confirmed,recovered:recovered,deaths:deaths,lastUpdate:lastUpdate});case 14:_context.prev=14;_context.t0=_context[\"catch\"](2);return _context.abrupt(\"return\",_context.t0);case 17:case\"end\":return _context.stop();}}},_callee,null,[[2,14]]);}));return function fetchData(_x){return _ref.apply(this,arguments);};}();export var fetchDailyData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _yield$axios$get2,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return axios.get(\"\".concat(url,\"/daily\"));case 3:_yield$axios$get2=_context2.sent;data=_yield$axios$get2.data;console.log(data);return _context2.abrupt(\"return\",data.map(function(_ref3){var confirmed=_ref3.confirmed,recovered=_ref3.recovered,deaths=_ref3.deaths,date=_ref3.reportDate;return{confirmed:confirmed.total,recovered:recovered.total,deaths:deaths.total,date:date};}));case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",_context2.t0);case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[0,9]]);}));return function fetchDailyData(){return _ref2.apply(this,arguments);};}();export var fetchCountries=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _yield$axios$get3,countries;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return axios.get(\"\".concat(url,\"/countries\"));case 3:_yield$axios$get3=_context3.sent;countries=_yield$axios$get3.data.countries;// console.log(response);\nconsole.log(\"Here are the countries: \",countries.map(function(country){return country.name;}));// fetchCountryHotSpots(countries.map((country) => country.name));\nreturn _context3.abrupt(\"return\",countries.map(function(country){return country.name;}));case 9:_context3.prev=9;_context3.t0=_context3[\"catch\"](0);return _context3.abrupt(\"return\",_context3.t0);case 12:case\"end\":return _context3.stop();}}},_callee3,null,[[0,9]]);}));return function fetchCountries(){return _ref4.apply(this,arguments);};}();export var fetchCountryHotSpots=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _yield$axios$get4,countries,countriesList,countryHotSpot,i,currCountry,currData,numInfected,numDead,deathPercentage;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return axios.get(\"\".concat(url,\"/countries\"));case 2:_yield$axios$get4=_context4.sent;countries=_yield$axios$get4.data.countries;countriesList=countries.map(function(country){return country.name;});countryHotSpot=new Map();_context4.prev=6;console.log(\"I am in fetchCountryHotSpots\");i=0;case 9:if(!(i<188)){_context4.next=25;break;}if(!(countriesList[i]===\"Gambia\")){_context4.next=14;break;}// This country data is not available so setting it to 0\ncountryHotSpot.set(\"Gambia\",0);_context4.next=22;break;case 14:// console.log(\"-> \" + countriesList[i]);\ncurrCountry=countriesList[i];_context4.next=17;return fetchData(countriesList[i]);case 17:currData=_context4.sent;numInfected=currData.confirmed.value;numDead=currData.deaths.value;deathPercentage=numDead/numInfected*100;// console.log(\"\\tThis is the current data or this country: \" + currData.confirmed.value);\ncountryHotSpot.set(currCountry,deathPercentage);case 22:i++;_context4.next=9;break;case 25:console.log(\"This is the country hot spots: \",countryHotSpot);console.log(\"This is the map of all the countries: \",countriesList);return _context4.abrupt(\"return\",countryHotSpot);case 30:_context4.prev=30;_context4.t0=_context4[\"catch\"](6);return _context4.abrupt(\"return\",_context4.t0);case 33:case\"end\":return _context4.stop();}}},_callee4,null,[[6,30]]);}));return function fetchCountryHotSpots(){return _ref5.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/alyssakelley/Desktop/GitHub/covid19_visualization/src/api/index.js"],"names":["axios","url","fetchData","country","changeableURL","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","console","log","map","date","reportDate","total","fetchCountries","countries","name","fetchCountryHotSpots","countriesList","countryHotSpot","Map","i","set","currCountry","currData","numInfected","value","numDead","deathPercentage"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst url = 'https://covid19.mathdro.id/api'; // link to the api\n\nexport const fetchData = async (country) => {\n    let changeableURL = url; // initially setting the URL to the basic API URL because no country has been selected yet \n    if(country)\n    {\n        // this is indicating that a country has been selected, so we want to build a new URL to the API for that country\n        changeableURL = `${url}/countries/${country}`\n    }\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableURL);\n        //console.log(response);\n\n        // creating a javascript object to hold all of the useful data from the api\n        // the api contains a lot of random data that does not have as revelant information\n        // so we pull out the most import pieces: confirmed, recovered, deaths, and when it \n        // was last updated. This could also be done when creating the data var as so:\n        // const { data: { confirmed, recovered, daths, lastUpdate} } = await axios.get(url);\n        // const modifiedData = {\n        //     confirmed: data.confirmed,\n        //     recovered: data.recovered,\n        //     deaths: data.deaths,\n        //     lastUpdate: data.lastUpdate,\n        // }\n        // console.log(\"The following information is pertaining to: \" + country);\n        // console.log(\"\\tThis is the confirmed number of COIVD-19 cases from the API: \" + confirmed.value + \" as of \" + lastUpdate);\n        // console.log(\"\\tThis is the recovered number of COVID-19 cases from the API: \" + recovered.value + \" as of \" + lastUpdate);\n        // console.log(\"\\tThis is the number of deaths from COVID-19 from the API: \" + deaths.value + \" as of \" + lastUpdate);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch(error) {\n        return error;\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        console.log(data);\n        return data.map(({ confirmed, recovered, deaths, reportDate: date }) => ({ confirmed: confirmed.total, recovered: recovered.total, deaths: deaths.total, date }));\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries }} = await axios.get(`${url}/countries`);\n        // console.log(response);\n        console.log(\"Here are the countries: \", countries.map((country) => country.name));\n        // fetchCountryHotSpots(countries.map((country) => country.name));\n        return countries.map((country) => country.name);\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchCountryHotSpots = async () => {\n    const { data: { countries }} = await axios.get(`${url}/countries`);\n    const countriesList = (countries.map((country) => country.name));\n    let countryHotSpot = new Map();\n    try {\n        console.log(\"I am in fetchCountryHotSpots\");\n        for( var i = 0; i < 188; i++)\n        {\n            if (countriesList[i] === \"Gambia\")\n            {\n                // This country data is not available so setting it to 0\n                countryHotSpot.set(\"Gambia\", 0);\n            }\n            else \n            {\n                // console.log(\"-> \" + countriesList[i]);\n                const currCountry = countriesList[i];\n                const currData = await fetchData(countriesList[i]);\n                const numInfected = currData.confirmed.value;\n                const numDead = currData.deaths.value;\n                const deathPercentage = ((numDead/numInfected) * 100)\n                // console.log(\"\\tThis is the current data or this country: \" + currData.confirmed.value);\n                countryHotSpot.set(currCountry, deathPercentage);\n            }\n        }\n        console.log(\"This is the country hot spots: \", countryHotSpot);\n        console.log(\"This is the map of all the countries: \", countriesList);\n        return countryHotSpot;\n    } catch (error) {\n        return error;\n    }\n}"]},"metadata":{},"sourceType":"module"}