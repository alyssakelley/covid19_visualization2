{"ast":null,"code":"import _regeneratorRuntime from\"/Users/alyssakelley/Desktop/GitHub/covid19_visualization/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alyssakelley/Desktop/GitHub/covid19_visualization/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/alyssakelley/Desktop/GitHub/covid19_visualization/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{fetchDailyData}from'../../api';import{Line,Bar}from'react-chartjs-2';import styles from'./Chart.module.css';var Chart=function Chart(_ref){var data=_ref.data,country=_ref.country,graphType=_ref.graphType;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];useEffect(function(){var fetchAPI=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=setDailyData;_context.next=3;return fetchDailyData();case 3:_context.t1=_context.sent;(0,_context.t0)(_context.t1);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchAPI(){return _ref2.apply(this,arguments);};}();// console.log(initialDailyData);\nfetchAPI();window.scrollTo(0,0);// this prevents the webapge from scrolling to the top when the different graphs are selected\n},[]);// this will only happen once \nvar countryName=country;var message=\"Current state in \".concat(country);if(!country){countryName=\"Global\";message=\"Current Global state\";}var lineChart=dailyData[0]?/*#__PURE__*/React.createElement(Line,{data:{labels:dailyData.map(function(_ref3){var date=_ref3.date;return date;}),datasets:[{data:dailyData.map(function(data){return data.confirmed;}),label:'Infected',borderColor:'#3333ff',fill:true},{data:dailyData.map(function(data){return data.recovered;}),label:'Recovered',borderColor:'green',fill:true},{data:dailyData.map(function(data){return data.deaths;}),label:'Deaths',borderColor:'red',backgroundColor:'rgba(255, 0, 0, 0.5',fill:true}]},options:{scales:{yAxes:[{scaleLabel:{display:true,labelString:'Number of cases per category'}}],xAxes:[{scaleLabel:{display:true,labelString:'Date data was recieved'}}]},title:{display:true,text:\"Line graph - \".concat(message)}}}):\"Line Graph Unavailable\";console.log(\"Line - This is in Chart.js and this is data for infected: \"+dailyData.map(function(data){return data.confirmed;}));console.log(\"Line - This is in Chart.js and this is data for recovered: \"+dailyData.map(function(data){return data.recovered;}));console.log(\"Line - This is in Chart.js and this is data for deaths: \"+dailyData.map(function(data){return data.deaths;}));var barChart=data.confirmed?/*#__PURE__*/React.createElement(Bar,{data:{labels:['Infected','Recovered','Deaths'],datasets:[{label:'People',backgroundColor:['rgba(0, 0, 255, 0.5',// infected = blue\n'rgba(0, 255, 0, 0.5',// recovered = green\n'rgba(255, 0, 0, 0.5'// deaths = red\n],data:[data.confirmed.value,data.recovered.value,data.deaths.value]}]},options:{scales:{yAxes:[{scaleLabel:{display:true,labelString:'Number of cases per category'}}]},legend:{display:false},title:{display:true,text:\"Bar Graph - \".concat(message)}}}):\"Bar Graph Unavailable\";// if there is a country chosen, then we display a bar chart for that country\n// otherwise display the line chart for the global values\nreturn/*#__PURE__*/React.createElement(\"div\",{className:styles.container},graphType==\"barGraph\"?barChart:lineChart);};export default Chart;","map":{"version":3,"sources":["/Users/alyssakelley/Desktop/GitHub/covid19_visualization/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","country","graphType","dailyData","setDailyData","fetchAPI","window","scrollTo","countryName","message","lineChart","labels","map","date","datasets","confirmed","label","borderColor","fill","recovered","deaths","backgroundColor","scales","yAxes","scaleLabel","display","labelString","xAxes","title","text","console","log","barChart","value","legend","container"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data, country, graphType}) => {\n    const [dailyData, setDailyData] = useState([]);\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        // console.log(initialDailyData);\n        fetchAPI();\n        window.scrollTo(0, 0); // this prevents the webapge from scrolling to the top when the different graphs are selected\n    }, []); // this will only happen once \n\n    let countryName = country;\n    let message = `Current state in ${country}`;\n    if (!country) {\n        countryName = \"Global\";\n        message = \"Current Global state\";\n    }\n\n    const lineChart = (\n        dailyData[0] ? (\n            <Line \n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: \n                    [{\n                        data: dailyData.map((data) => data.confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true,\n                    }, \n                    {\n                        data: dailyData.map((data) => data.recovered),\n                        label: 'Recovered',\n                        borderColor: 'green',\n                        fill: true,\n                    }, \n                    {\n                        data: dailyData.map((data) => data.deaths),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        backgroundColor: 'rgba(255, 0, 0, 0.5',\n                        fill: true,\n                    },\n                    ],\n                }}\n                options=\n                {{\n                    scales: {\n                        yAxes: [{\n                          scaleLabel: {\n                            display: true,\n                            labelString: 'Number of cases per category'\n                          }\n                        }],\n                        xAxes: [{\n                          scaleLabel: {\n                            display: true,\n                            labelString: 'Date data was recieved'\n                          }\n                        }],\n                    },\n                    title: { display: true, text:`Line graph - ${message}`}     \n                }}\n            />\n            ) : \"Line Graph Unavailable\"\n    );\n\n    console.log(\"Line - This is in Chart.js and this is data for infected: \" + dailyData.map((data) => data.confirmed));\n    console.log(\"Line - This is in Chart.js and this is data for recovered: \" + dailyData.map((data) => data.recovered));\n    console.log(\"Line - This is in Chart.js and this is data for deaths: \" + dailyData.map((data) => data.deaths));\n\n    const barChart = (\n        data.confirmed ? (\n            <Bar \n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: \n                    [{\n                        label: 'People',\n                        backgroundColor: \n                        [\n                            'rgba(0, 0, 255, 0.5', // infected = blue\n                            'rgba(0, 255, 0, 0.5', // recovered = green\n                            'rgba(255, 0, 0, 0.5', // deaths = red\n                        ], \n                        data: [data.confirmed.value, data.recovered.value, data.deaths.value]\n                    }]\n                }}\n                options=\n                {{\n                    scales: {\n                        yAxes: [{\n                          scaleLabel: {\n                            display: true,\n                            labelString: 'Number of cases per category'\n                          }\n                        }],\n                        },     \n                    legend: { display: false},\n                    title: { display: true, text:`Bar Graph - ${message}`}\n                }}\n            />\n        ) : \"Bar Graph Unavailable\"\n    );\n\n    // if there is a country chosen, then we display a bar chart for that country\n    // otherwise display the line chart for the global values\n    return (\n        <div className={styles.container}>\n            {graphType==\"barGraph\" ? barChart : lineChart} \n        </div>\n    )\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}